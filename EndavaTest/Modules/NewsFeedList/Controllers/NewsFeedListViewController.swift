//
//  NewsFeedListViewController.swift
//  EndavaTest
//
//  Created by Danijel Kecman on 8/3/17.
//  Copyright (c) 2017 Danijel Kecman. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import ReSwift
import PKHUD

final class NewsFeedListViewController: UIViewController, Progressable {
  
  // MARK: - IBOutlets -
  
  @IBOutlet weak var tableView: UITableView!
  
  // MARK: - Private properties -
  
  fileprivate var tableDataSource: TableDataSource<NewsFeedCell, Article>?
  
  // MARK: - Lifecycle -
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    store.subscribe(self) { $0.select { $0.newsFeedState } }
    store.dispatch(RoutingAction(destination: .feedList))
  }
  
  override func viewWillDisappear(_ animated: Bool) {
    super.viewWillDisappear(animated)
    store.unsubscribe(self)
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
    _configure()
    store.dispatch(FetchFeedAction.fetchFeed)
  }
  
  // MARK: - Private functions -
  
  private func _configure() {
    // Navigation bar setup
    let refreshButton = UIBarButtonItem(barButtonSystemItem: .refresh, target: self, action: #selector(_refreshFeed))
    navigationItem.rightBarButtonItem = refreshButton
    
    PKHUD.sharedHUD.dimsBackground = false
    PKHUD.sharedHUD.contentView = PKHUDProgressView()
    
    // TableView setup
    tableView.register(cellType: NewsFeedCell.self)
    tableView.rowHeight = UITableViewAutomaticDimension
    tableView.estimatedRowHeight = 80
    tableDataSource = TableDataSource(cellIdentifier: NewsFeedCell.reuseIdentifier, models: []) { (cell, model) -> NewsFeedCell in
      cell.configure(with: NewsFeedItem(author: model.author,
                                        title: model.title,
                                        description: model.description,
                                        imageUrl: model.imageUrl,
                                        publishedAt: model.publishedAt))
      return cell
    }
    tableView.dataSource = tableDataSource
  }
  
  // MARK: - Actions -
  
  @objc func _refreshFeed() {
    store.dispatch(FetchFeedAction.fetchFeed)
  }
}

// MARK: - Table View delegate

extension NewsFeedListViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    store.dispatch(SelectArticleAction(articleIndex: indexPath.row))
    store.dispatch(RoutingAction(destination: .newsDetails))
  }
}

// MARK: - Store Subscriber delegate

extension NewsFeedListViewController: StoreSubscriber {
  func newState(state: NewsFeedState) {
    tableDataSource?.models = state.articles
    tableView.reloadData()
    
    state.showLoading ? PKHUD.sharedHUD.show() : PKHUD.sharedHUD.hide()
  }
}












